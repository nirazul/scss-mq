////
/// Helper library to make usage of media queries more simple and flexible
////
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '../vendor/@nirazul/scss-utils/lib/function/list/purge' as *;
@use 'config';
@use 'util';
@use 'parser/index' as parser;

/// Apply configuration to the library on a per call basis
/// @param {List} $widths - A list of viewports and their breakpoints
/// @param {string} $name - The config name
///
@mixin configure($widths: (), $name: 'default') {
  @include util.configure($widths, $name);
}

/// Apply global configuration to the library
/// @param {List} $allowed-operators - A list of allowed operators in media expressions
/// @param {Map} $media-feature-expressions - A map of allowed media feature expression keywords
/// @param {Map} $unit-intervals - A map of unit intervals
///
@mixin configure-globally($allowed-operators: null, $unit-intervals: null, $media-feature-expressions: null) {
  @include util.configure-globally(
    $allowed-operators: $allowed-operators,
    $media-feature-expressions: $media-feature-expressions,
    $unit-intervals: $unit-intervals,
  );
}

/// Use a list of conditions to define a media query and protect against wrong usage.
/// @param {List} $conditions - Media query conditions
/// @param {string} $config-name - The utilized config's name
/// @example scss - Above breakpoint `md`:
///   @include media(('>md')) { color: red; }
/// @example scss - Below or equal breakpoint `lg`:
///   @include media(('<=lg')) { color: red; }
///
@mixin media($conditions, $config-name: 'default') {
  $purged-conditions: purge($conditions);
  $num-purged-conditions: list.length($purged-conditions);

  @if ($num-purged-conditions == 0) {
    @content;
  } @else {
    @include util.check-condition-validity($purged-conditions, $config-name);

    @media #{string.unquote(parser.parse-media-query(parser.resolve-feature-queries($purged-conditions, $config-name)))} {
      @content;
    }
  }
}
